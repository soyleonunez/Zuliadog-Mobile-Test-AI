import 'package:supabase_flutter/supabase_flutter.dart';
import 'package:uuid/uuid.dart';

/// Servicio para crear datos de prueba reales en Supabase
class SupabaseDataSeeder {
  static const String _tablePatients = 'patients';
  static const String _tableRecords = 'medical_records';
  static const String _tableAttachments = 'record_attachments';

  final SupabaseClient _supa = Supabase.instance.client;

  /// Crea datos de prueba reales en Supabase
  Future<void> seedTestData() async {
    try {
      print('üå± Iniciando creaci√≥n de datos de prueba...');

      // 1. Crear pacientes de prueba
      final patients = await _createTestPatients();
      print('‚úÖ ${patients.length} pacientes creados');

      // 2. Crear historias m√©dicas para cada paciente
      for (final patient in patients) {
        await _createTestMedicalRecords(patient['id'] as String);
      }
      print('‚úÖ Historias m√©dicas creadas');

      print('üéâ Datos de prueba creados exitosamente');
    } catch (e) {
      print('‚ùå Error al crear datos de prueba: $e');
    }
  }

  /// Crea pacientes de prueba
  Future<List<Map<String, dynamic>>> _createTestPatients() async {
    final patients = [
      {
        'id': const Uuid().v4(),
        'name': 'Max',
        'species': 'Canino',
        'breed': 'Labrador',
        'sex': 'Macho',
        'owner_name': 'Mar√≠a Garc√≠a',
        'owner_phone': '+58 412 123 4567',
        'birth_date': '2020-03-15',
        'temperature': 38.5,
        'respiration': 22,
        'pulse': 90,
        'hydration': 'Normal',
        'created_at': DateTime.now().toUtc().toIso8601String(),
        'updated_at': DateTime.now().toUtc().toIso8601String(),
      },
      {
        'id': const Uuid().v4(),
        'name': 'Luna',
        'species': 'Felino',
        'breed': 'Persa',
        'sex': 'Hembra',
        'owner_name': 'Carlos L√≥pez',
        'owner_phone': '+58 414 987 6543',
        'birth_date': '2021-07-22',
        'temperature': 38.8,
        'respiration': 25,
        'pulse': 120,
        'hydration': 'Normal',
        'created_at': DateTime.now().toUtc().toIso8601String(),
        'updated_at': DateTime.now().toUtc().toIso8601String(),
      },
      {
        'id': const Uuid().v4(),
        'name': 'Bella',
        'species': 'Canino',
        'breed': 'Golden Retriever',
        'sex': 'Hembra',
        'owner_name': 'Ana Mart√≠nez',
        'owner_phone': '+58 416 555 1234',
        'birth_date': '2019-11-08',
        'temperature': 38.2,
        'respiration': 20,
        'pulse': 85,
        'hydration': 'Normal',
        'created_at': DateTime.now().toUtc().toIso8601String(),
        'updated_at': DateTime.now().toUtc().toIso8601String(),
      },
    ];

    final createdPatients = <Map<String, dynamic>>[];

    for (final patient in patients) {
      try {
        await _supa.from(_tablePatients).insert(patient);
        createdPatients.add(patient);
        print('‚úÖ Paciente creado: ${patient['name']} (${patient['id']})');
      } catch (e) {
        print('‚ö†Ô∏è Error al crear paciente ${patient['name']}: $e');
      }
    }

    return createdPatients;
  }

  /// Crear un paciente individual
  Future<void> createPatient({
    required String name,
    required String species,
    required String breed,
  }) async {
    final patient = {
      'id': const Uuid().v4(),
      'name': name,
      'species': species,
      'breed': breed,
      'sex': 'No especificado',
      'owner_name': 'Propietario',
      'owner_phone': '+58 000 000 0000',
      'birth_date': DateTime.now()
          .subtract(const Duration(days: 365))
          .toIso8601String()
          .split('T')[0],
      'temperature': 38.5,
      'respiration': 22,
      'pulse': 90,
      'hydration': 'Normal',
      'created_at': DateTime.now().toUtc().toIso8601String(),
      'updated_at': DateTime.now().toUtc().toIso8601String(),
    };

    try {
      await _supa.from(_tablePatients).insert(patient);
      print('‚úÖ Paciente creado: $name (${patient['id']})');
    } catch (e) {
      print('‚ö†Ô∏è Error al crear paciente $name: $e');
      rethrow;
    }
  }

  /// Crea historias m√©dicas de prueba para un paciente
  Future<void> _createTestMedicalRecords(String patientId) async {
    final records = [
      {
        'id': const Uuid().v4(),
        'patient_id': patientId,
        'created_by': 'Dr. Veterinario',
        'locked': false,
        'content_delta':
            '{"ops":[{"insert":"Consulta de rutina. Paciente en buen estado general.\\n\\n‚Ä¢ Apetito: Normal\\n‚Ä¢ Comportamiento: Activo y alerta\\n‚Ä¢ Peso: Estable\\n\\nRecomendaciones: Continuar con la dieta actual y ejercicio regular."}]}',
        'title': 'Consulta de rutina',
        'summary': 'Paciente en buen estado general',
        'diagnosis': 'Estado de salud normal',
        'department_code': 'MED',
        'created_at': DateTime.now()
            .subtract(const Duration(days: 7))
            .toUtc()
            .toIso8601String(),
        'updated_at': DateTime.now()
            .subtract(const Duration(days: 7))
            .toUtc()
            .toIso8601String(),
      },
      {
        'id': const Uuid().v4(),
        'patient_id': patientId,
        'created_by': 'Dr. Veterinario',
        'locked': false,
        'content_delta':
            '{"ops":[{"insert":"Seguimiento post-tratamiento.\\n\\n‚Ä¢ Mejora notable en el estado general\\n‚Ä¢ Apetito restaurado\\n‚Ä¢ Actividad normal\\n\\nPr√≥xima cita en 2 semanas."}]}',
        'title': 'Seguimiento post-tratamiento',
        'summary': 'Mejora notable en el estado general',
        'diagnosis': 'Recuperaci√≥n exitosa',
        'department_code': 'MED',
        'created_at': DateTime.now()
            .subtract(const Duration(days: 3))
            .toUtc()
            .toIso8601String(),
        'updated_at': DateTime.now()
            .subtract(const Duration(days: 3))
            .toUtc()
            .toIso8601String(),
      },
    ];

    for (final record in records) {
      try {
        await _supa.from(_tableRecords).insert(record);
        print(
            '‚úÖ Historia m√©dica creada: ${record['title']} para paciente $patientId');
      } catch (e) {
        print('‚ö†Ô∏è Error al crear historia m√©dica: $e');
      }
    }
  }

  /// Limpia todos los datos de prueba
  Future<void> clearTestData() async {
    try {
      print('üßπ Limpiando datos de prueba...');

      // Eliminar historias m√©dicas
      await _supa.from(_tableRecords).delete().neq('id', '');

      // Eliminar pacientes
      await _supa.from(_tablePatients).delete().neq('id', '');

      print('‚úÖ Datos de prueba eliminados');
    } catch (e) {
      print('‚ùå Error al limpiar datos: $e');
    }
  }
}
